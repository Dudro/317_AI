from Main import *
import argparse
import subprocess


def run_sims(verbose, a_star, h_name, push):
    """
    Runs a suite of simulations based on the level of 'push'. The other
    parameters simply cause their command line equivalent to be passed to each
    invocation of Main.py as a subprocess. Returns a list of all the JSON file
    names generated by the underlying calls to Main.py.

    :param verbose: more verbose output
    :param a_star: run simulations using (the slower) A* as well as the other
        algorithms
    :param h_name: the name of the heuristic function to use
    :param push: how much to push each parameter; choice of [0, 1, 2, 3]
    :rtype: list(string)
    """
    # Set parameter ranges.
    if push == 0:
        num_sims = 1
        n_set = [defaults['n']]
        k_set = [defaults['k']]
        m_set = [defaults['m']]
        bound_percentage_set = [defaults['bound']]
        bound_cap_set = [1]
        k_limit_set = [defaults['k_limit']]
    elif push == 1:
        num_sims = str(defaults['num_sims'])
        n_set = range(1, 4)
        k_set = range(1, 11)
        m_set = range(30, 301, 30)
        bound_percentage_set = [0.01, 0.02, 0.03, 0.04, 0.05, 0.07, 0.09,
                                0.15, 0.25, 0.50]
        bound_cap_set = range(1, 20, 3)
        k_limit_set = range(1, 20, 3)
    elif push == 2:
        num_sims = str(5)
        n_set = range(4, 11)
        k_set = range(10, 31, 2)
        m_set = range(300, 1001, 100)
        bound_percentage_set = [0.01, 0.02, 0.03, 0.04, 0.05, 0.07, 0.09,
                                0.15, 0.25]
        bound_cap_set = range(1, 14, 3)
        k_limit_set = range(1, 14, 3)
    else:
        num_sims = str(2)
        n_set = range(11, 32, 4)
        k_set = range(30, 61, 5)
        m_set = range(1000, 5001, 1000)
        bound_percentage_set = [0.01, 0.02, 0.03, 0.04, 0.05, 0.07, 0.09,
                                0.15]
        bound_cap_set = range(1, 8, 3)
        k_limit_set = range(1, 8, 3)

    # Run the simulations.
    file_names = []

    # Vary the number of cars.
    for n in n_set:
        arg_list = build_arg_list(verbose, a_star, num_sims, h_name)
        arg_list.extend(["-n", str(n)])
        do_run(arg_list, get_file_names(num_sims=num_sims, n=n, h_name=h_name),
               file_names, a_star=a_star)

    # Vary the number of packages.
    for k in k_set:
        arg_list = build_arg_list(verbose, a_star, num_sims, h_name)
        arg_list.extend(["-k", str(k)])
        do_run(arg_list, get_file_names(num_sims=num_sims, k=k, h_name=h_name),
               file_names, a_star=a_star)

    # Vary the number of locations.
    for m in m_set:
        arg_list = build_arg_list(verbose, a_star, num_sims, h_name)
        arg_list.extend(["-m", str(m)])
        do_run(arg_list, get_file_names(num_sims=num_sims, m=m, h_name=h_name),
               file_names, a_star=a_star)

    max_n = str(max(n_set))
    max_k = str(max(k_set))
    max_m = str(max(m_set))

    # Vary the bound for bounded A* as a percentage.
    for bound in bound_percentage_set:
        arg_list = build_arg_list(verbose, a_star, num_sims, h_name,
                                  local_beam=False)
        arg_list.extend(["-n", max_n, "-k", max_k, "-m", max_m, "--bound",
                         str(bound)])
        do_run(arg_list, get_file_names(num_sims=num_sims, n=max_n, k=max_k,
                                        m=max_m, h_name=h_name, bound=bound),
               file_names, a_star=a_star, local_beam=False)

    # Vary the bound for bounded A* as a cap.
    for bound in bound_cap_set:
        arg_list = build_arg_list(verbose, a_star, num_sims, h_name,
                                  local_beam=False)
        arg_list.extend(["-n", max_n, "-k", max_k, "-m", max_m, "--bound",
                         str(bound)])
        do_run(arg_list, get_file_names(num_sims=num_sims, n=max_n, k=max_k,
                                        m=max_m, h_name=h_name, bound=bound),
               file_names, a_star=a_star, local_beam=False)

    # Vary k_limit for Local Beam Search.
    for k_limit in k_limit_set:
        arg_list = build_arg_list(verbose, a_star, num_sims, h_name,
                                  bounded_a_star=False)
        arg_list.extend(["-n", max_n, "-k", max_k, "-m", max_m, "--k-limit",
                         str(k_limit)])
        do_run(arg_list, get_file_names(num_sims=num_sims, n=max_n, k=max_k,
                                        m=max_m, h_name=h_name,
                                        k_limit=k_limit),
               file_names, a_star=a_star, bounded_a_star=False)

    return file_names


def build_arg_list(verbose, a_star, num_sims, h_name, bounded_a_star=True,
                   local_beam=True):
    """
    Builds a list of arguments to give to subprocess.run() to run Main.py. The
    given parameters simply cause their command line equivalent to be added to
    the argument list.

    :rtype: list(string)
    """
    arg_list = ["python3", "Main.py", "--num-sims", str(num_sims),
                "--heuristic", h_name]
    if verbose:
        arg_list.append("-v")
    if a_star:
        arg_list.append("-a")
    if bounded_a_star:
        arg_list.append("-b")
    if local_beam:
        arg_list.append("-l")
    return arg_list


def do_run(arg_list, names, file_names, a_star=False, bounded_a_star=True,
           local_beam=True):
    """
    Runs arg_list as a subprocess, and checks the return code. Raises an error
    if it is non-zero. Otherwise, adds the correct file names to the given
    'file_names' list, based on the values of 'a_star', 'bounded_a_star', and
    'local_beam'.
    """
    subprocess.run(arg_list).check_returncode()
    if a_star and not names['a_star'] + ".json" in file_names:
        file_names.append(names['a_star'] + ".json")
    if bounded_a_star and not names['bounded_a_star'] + ".json" in file_names:
        file_names.append(names['bounded_a_star'] + ".json")
    if local_beam and not names['local_beam'] + ".json" in file_names:
        file_names.append(names['local_beam'] + ".json")


if __name__ == "__main__":
    # Define command line arguments.
    parser = argparse.ArgumentParser(
        description="Run a large suite of simulations, with the various "
                    "parameters pushed to different levels.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument("-v", "--verbose", action='store_true',
                        help="more verbose output")
    parser.add_argument("-a", "--a-star", action='store_true',
                        help="run simulations using A* Search in addition to "
                             "the default Bounded A* Search and Local Beam "
                             "Search")
    parser.add_argument("--heuristic", default=defaults['h_name'],
                        choices=["zero", "undelivered", "scaled", "sum"],
                        help="heuristic function to use")
    parser.add_argument("-p", "--push", type=int, default=0,
                        choices=[0, 1, 2, 3],
                        help="how far to push each parameter")

    # Parse command line arguments and run the simulations.
    args = parser.parse_args()
    files = run_sims(args.verbose, args.a_star, args.heuristic, args.push)
    print(files)  # Placeholder for more useful work.
